$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 C clk $end
  $var wire 1 D memRead $end
  $var wire 1 E memWrite $end
  $var wire 32 F memAddr [31:0] $end
  $var wire 32 G writeData [31:0] $end
  $var wire 32 H readData [31:0] $end
  $scope module smolMemory $end
   $var wire 1 C clk $end
   $var wire 1 D memRead $end
   $var wire 1 E memWrite $end
   $var wire 32 F memAddr [31:0] $end
   $var wire 32 G writeData [31:0] $end
   $var wire 32 H readData [31:0] $end
   $var wire 32 # memory[0] [31:0] $end
   $var wire 32 $ memory[1] [31:0] $end
   $var wire 32 % memory[2] [31:0] $end
   $var wire 32 & memory[3] [31:0] $end
   $var wire 32 ' memory[4] [31:0] $end
   $var wire 32 ( memory[5] [31:0] $end
   $var wire 32 ) memory[6] [31:0] $end
   $var wire 32 * memory[7] [31:0] $end
   $var wire 32 + memory[8] [31:0] $end
   $var wire 32 , memory[9] [31:0] $end
   $var wire 32 - memory[10] [31:0] $end
   $var wire 32 . memory[11] [31:0] $end
   $var wire 32 / memory[12] [31:0] $end
   $var wire 32 0 memory[13] [31:0] $end
   $var wire 32 1 memory[14] [31:0] $end
   $var wire 32 2 memory[15] [31:0] $end
   $var wire 32 3 memory[16] [31:0] $end
   $var wire 32 4 memory[17] [31:0] $end
   $var wire 32 5 memory[18] [31:0] $end
   $var wire 32 6 memory[19] [31:0] $end
   $var wire 32 7 memory[20] [31:0] $end
   $var wire 32 8 memory[21] [31:0] $end
   $var wire 32 9 memory[22] [31:0] $end
   $var wire 32 : memory[23] [31:0] $end
   $var wire 32 ; memory[24] [31:0] $end
   $var wire 32 < memory[25] [31:0] $end
   $var wire 32 = memory[26] [31:0] $end
   $var wire 32 > memory[27] [31:0] $end
   $var wire 32 ? memory[28] [31:0] $end
   $var wire 32 @ memory[29] [31:0] $end
   $var wire 32 A memory[30] [31:0] $end
   $var wire 32 B memory[31] [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
1C
0D
0E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
#1
0C
#2
b00000000000000000000000000001010 #
1C
1E
b00000000000000000000000000001010 G
#3
0C
#4
1C
0E
#5
0C
#6
1C
1D
b00000000000000000000000000001010 H
#7
0C
#8
1C
0D
b00000000000000000000000000001000 F
#9
0C
1E
b00000000000000000000000000001011 G
#10
b00000000000000000000000000001011 %
1C
1D
b00000000000000000000000000000000 H
#11
0C
0E
#12
1C
b00000000000000000000000000001011 H
#13
0C
#14
1C
#15
0C
#16
1C
#17
0C
#18
1C
#19
0C
#20
1C
#21
0C
#22
1C
#23
0C
#24
1C
#25
0C
#26
1C
#27
0C
#28
1C
#29
0C
